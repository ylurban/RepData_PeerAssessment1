filter(pack_sum,count>678)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
arrange(top_counts,count)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(quantile(pack_sum$unique,probs=0.99))
top_unique<-filter(pack_sum,quantile(pack_sum$unique,probs=0.99))
?
help
filter(pack_sum, unique>465)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
swirl()
library(swirl)
swirl
swirl()
submit()
submit()
View(result3)
print(cran)
help
?
select(cran$ip_id, cran$country, cran$package, cran$size) %>%
help
help
?
sumbit()
swirl()
?select
help
select() %>%
sd
submit()
select(ip_id, country, package, size) %>%
sum
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
submit()
?
''
''
submit()
help
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
help()
submit()
submit()
help
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res
res<-gather(students2,key, sex_class, value, count)
res<-gather(students2,key, sex_class,count)
res<-gather(students2,sex_class,count)
gather(students2, sex_class,count, -grade)
res<-gather(students2, sex_class,count, -grade)
res
?separate()
?separate
separate(res,sex_class, c("sex", "class"))
sumbit()
submit()
submit()
submit()
submit()
?%>%
?chain
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
students4
students4
submit()
?unique
submit()
submit()
submit()
submit()
passed
failed
library(dplyr)
passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
packageVersion('deplyr')
install.packages("deplyr")
swirl()
help
swirl()
install.packages("deplyr")
install.packages(deplyr)
install.packages(dplyr)
install.packages('dplyr')
install.packages("dplyr")
swirl()
swirl()
library(swirl)
swirl()
bind_rows(passed,failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("~/Desktop/RepData_PeerAssessment1")
read.csv(activity.csv)
read.csv("activity.csv")
read.csv("activity.csv"")
read.csv("activity.csv")
activity<-read.csv("activity.csv")
summary(activity)
str(activity)
head(activity)
tail(activity)
stepsbydate<-rbind(activity, activity$date)
activity$day<-weekdays(activity$date)
stepsbydate<-sapply(split(activity$steps, activity$date), sum)
hist(stepsbydate, col="grey", main= "Number of Steps", ylim=c(0,30))
stepsbydate<-aggregate(steps ~ date, activity, sum)
colnames(stepsbydate)<-c("Date", "Steps")
head(stepsbydate)
hist(stepsbydate, col="grey", main= "Number of Steps", x= "S"ylim=c(0,30))
hist(stepsbydate, col="grey", main= "Number of Steps", x= "Number of Steps per Day", ylim=c(0,30))
hist(stepsbydate, col="grey", main= "Number of Steps", xlim = "Number of Steps per Day", ylim=c(0,30))
hist(stepsbydate, col="grey", main= "Number of Steps",ylim=c(0,30))
hist(stepsbydate, col="grey", main= "Number of Steps",ylim=c(0,30))
plot(stepsbydate)
head(activity)
stepsbydate
library(ggplot)
install.packages("ggplot")
plot(stepsbydate)
hist(stepsbydate)
qplot()
library(qplot)
qplot(stepsbydate)
hist(stepsbydate$steps, col="grey", main= "Number of Steps",ylim=c(0,30))
hist(stepsbydate$steps, col="grey", main= "Total Number of Steps Taken Each Day",xlab="Total Steps per Dat",ylim=c(0,30))
stepsbydate
hist(stepsbydate$Steps, col="grey", main= "Total Number of Steps Taken Each Day",xlab="Total Steps per Dat",ylim=c(0,30))
mean(stepsbydate$steps)
mean(stepsbydate$Steps)
median(stepbydate$Steps)
median(stepsbydate$Steps)
head(stepsbydate)
head(activity)
tail(activity)
activity
There are 17568 observations with 3 variables:
## Imputing missing values
hist(stepsbydate$Steps, col="grey", main= "Total Number of Steps Taken Each Day",xlab="Total Steps per Day",ylim=c(0,30))
head(stepsinterval)
stepsinterval<-aggregate(steps ~ interval, Steps, mean)
stepsinterval<-aggregate(steps ~ interval, steps, mean)
stepsinterval<-aggregate(steps ~ interval, activity, mean)
head(stepsinterval)
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=2, main="Average Number of Steps Taken" )
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=3, main="Average Number of Steps Taken" )
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken" )
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken", xlab="Average Steps", ylab="Interval")
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken",xlab="Interval", ylab="Average Steps")
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken",ylab="Interval", xlab="Average Steps")
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken",ylab="5 Minutes Interval", xlab="Average Steps")
head(stepsinterval)
MaxInterval<-max(stepsinterval$steps)
MaxInterval
MaxInterval_id<-which.max(stepsinterval$steps)
MaxInterval_id
stepsinterval [MaxInterval_id]
stepsinterval [MaxInterval_id]
stepsinterval [MaxInterval_id, ]
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken",ylab="5-Minute Interval", xlab="Average Steps")
stepsinterval [MaxInterval_id, ]
str(activityraw)
str(activityraw)
activityraw<-read.csv("activity.csv", header= TRUE)
str(activityraw)
summary(activityraw)
head(stepsinterval)
activitynew<-merge(activityraw,stepsinterval, by= 'interval', all.y=F)
head(activitynew)
activitynew<-merge(activityraw,stepsinterval, by= 'interval', all.y=F)
keeps<-names(activity)
newactivity<-newactivity[keeps]
activitynew<-merge(activityraw,stepsinterval, by= 'interval', all.y=F)
keeps<-names(activity)
activitynew<-newactivity[keeps]
activitynew<-merge(activityraw,stepsinterval, by= 'interval', all.y=F)
keeps<-names(activity)
activitynew<-activitynew[keeps]
for (i in 1:nrow(activityraw)){
if(is.na(activityraw$steps[i])){
interval_val<-activityraw$interval[i]
row_id<- which(stepsinterval$interval== interval_val)
steps_val<- stepsinterval$steps[row_id]
activityraw[i]<-steps_val}
}
head(interval_val)
steps_imputed<-aggregate(steps ~ date, activityraw, sum)
hist(steps_imputed$steps, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
hist(steps_imputed$steps, type=l, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
hist(steps_imputed$steps, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
steps_imputed
for (i in 1:nrow(activityraw)){
if(is.na(activityraw$steps[i])){
interval_val<-activityraw$interval[i]
row_id<- which(stepsinterval$interval== interval_val)
steps_val<- stepsinterval$steps[row_id]
activityraw[i]<-steps_val}
}
steps_imputed<-aggregate(steps ~ date, activityraw, sum)
hist(steps_imputed$steps, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
steps_imputed
for (i in 1:nrow(activityraw)){
if(is.na(activityraw$steps[i])){
interval_val<-activityraw$interval[i]
row_id<- which(stepsinterval$interval== interval_val)
steps_val<- stepsinterval$steps[row_id]
activityraw$steps [i]<-steps_val}
}
steps_imputed
for (i in 1:nrow(activityraw)){
if(is.na(activityraw$steps[i])){
interval_val<-activityraw$interval[i]
row_id<- which(stepsinterval$interval== interval_val)
steps_val<- stepsinterval$steps[row_id]
activityraw$steps [i]<-steps_val}
}
steps_imputed<-aggregate(steps ~ date, activityraw, sum)
hist(steps_imputed$steps, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
steps_imputed
for (i in 1:nrow(activityraw)){
if (is.na(activityraw$steps[i])){
interval_val<-activityraw$interval[i]
row_id<- which(stepsinterval$interval== interval_val)
steps_val<- stepsinterval$steps[row_id]
activityraw$steps [i]<-steps_val}
}
steps_imputed<-aggregate(steps ~ date, activityraw, sum)
hist(steps_imputed$steps, col=4, main= "Total Number of Steps per Dat (Imputed)", xlab="Total Steps per Day")
stepsinterval
activitynew <- merge(activityraw, interval, by = 'interval', all.y = F)
## merge NA values with averages rounding up for integers
activitynew$steps[is.na(activitynew$steps)] <- as.integer(
round(activitynew$mean_steps[is.na(activitynew$steps)]))
## drop and reorder columns to match original activity data frame
keeps <- names(activity)
activitynew <- activitynew[keeps]
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (stepsinterval[stepsinterval$interval == interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps) else filled <- (stepsinterval[stepsinterval$interval == interval, "steps"])
return(filled)
}
activity_imputing <- activityraw
activity_imputing$steps <- mapply(fill.value, activity_imputing$steps, activity_imputing$interval)
activity_imputing
head(activity_imputing)
total.steps <- tapply(activity_imputing$steps, activity_imputing$date, FUN = sum)
qplot(total.steps, binwidth = 1000, xlab = "total number of steps taken each day")
hist(total.steps, binwidth = 1000, xlab = "total number of steps taken each day")
total.steps
total.steps
head(total.steps)
for (i in 1:nrow(df)){
if (is.na(activityraw$steps[i])){
interval_val <- activityraw$interval[i]
row_id <- which(stepsinterval$interval == interval_val)
steps_val <- stepsinterval$steps[row_id]
activityraw$steps[i] <- steps_val
}
}
# aggregate steps as per date to get total number of steps in a day
table_date_steps_imputed <- aggregate(steps ~ date, activityraw, sum)
# create histogram of total number of steps in a day
hist(table_date_steps_imputed$steps, col=1, main="(Imputed) Histogram of total number of steps per day", xlab="Total number of steps in a day")
## merge original activity data frame with interval data frame
newactivity <- merge(activityraw, stepsinterval, by = 'interval', all.y = F)
## merge NA values with averages rounding up for integers
newactivity$steps[is.na(newactivity$steps)] <- as.integer(
round(newactivity$mean_steps[is.na(newactivity$steps)]))
## drop and reorder columns to match original activity data frame
## http://stackoverflow.com/questions/4605206/drop-columns-r-data-frame
keeps <- names(activityraw)
newactivity <- newactivity[keeps]
```
activity <- merge(activityraw, stepsinterval, by = "interval", suffixes = c("",
".y"))
nas <- is.na(activityraw$steps)
activityraw$steps[nas] <- activityraw$steps.y[nas]
activity <- activity[, c(1:3)]
activity <- merge(activityraw, stepsinterval, by = "interval", suffixes = c("",
".y"))
nas <- is.na(activityraw$steps)
activityraw$steps[nas] <- activityraw$steps.y[nas]
activity <- activity[, c(1:3)]
activity
steps.date <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
activityraw <- merge(activityraw, stepsinterval, by = "interval", suffixes = c("",
".y"))
nas <- is.na(activityraw$steps)
activityraw$steps[nas] <- activityraw$steps.y[nas]
activityraw <- activityraw[, c(1:3)]
steps.date <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
steps.date <- aggregate(steps ~ date, data = activityraw, FUN = sum)
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
sum(is.na(activityraw$steps))
activityraw
activityraw<-read.csv("activity.csv", header= TRUE)
activityraw
sum(is.na(activityraw$steps))
fill_steps <- activityraw$steps
full_mean_steps = mean(data_imputing$steps)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
activityraw<-read.csv("activity.csv", header= TRUE)
str(activityraw)
activity<-na.omit(activityraw)
```
There are 17568 observations with 3 variables:
steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
date: The date on which the measurement was taken in YYYY-MM-DD format
interval: Identifier for the 5-minute interval in which measurement was taken
## What is mean total number of steps taken per day?
1. Make a histogram of the total number of steps taken each day
```{r}
stepsbydate<-aggregate(steps ~ date, activity, sum)
colnames(stepsbydate)<-c("Date", "Steps")
## plot the data
hist(stepsbydate$Steps, col="grey", main= "Total Number of Steps Taken Each Day",xlab="Total Steps per Day",ylim=c(0,30))
```
2. Calculate and report the mean and median total number of steps taken per day
```{r}
mean(stepsbydate$Steps)
median(stepsbydate$Steps)
```
## What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
# Aggregate steps by interval for the average number of steps across all days.
stepsinterval<-aggregate(steps ~ interval, activity, mean)
# Plot the data
plot(stepsinterval$interval,stepsinterval$steps,type='l', col=4, main="Average Number of Steps Taken",ylab="5-Minute Interval", xlab="Average Steps")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
MaxInterval_id<-which.max(stepsinterval$steps)
stepsinterval [MaxInterval_id, ]
```
The 104th 5-minute interval (interval 835) contains the maximum number of steps.
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset
(i.e. the total number of rows with NAs)
```{r}
summary(activityraw)
```
There are 2304 missing values (NAs) in variable steps.
2. Devise a strategy for filling in all of the missing values in the dataset. In this study I use the mean for the specific 5-minute interval across all days to replace NAs.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
fill_na <- function(activityraw, defaults) {
na_indices <- which(is.na(activityraw$steps))
na_replacements <- unlist(lapply(na_indices, FUN=function(idx){
interval = activityraw[idx,]$interval
defaults[defaults$interval == interval,]$steps
}))
fill_steps <- activityraw$steps
fill_steps[na_indices] <- na_replacements
fill_steps
}
data_imputing <- data.frame(
steps = fill_na(activityraw, stepsinterval),
date = activityraw$date,
interval = activityraw$interval)
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
```{r}
steps.date <- aggregate(steps ~ date, data = activityraw, FUN = sum)
barplot(steps.date$steps, names.arg = steps.date$date, xlab = "date", ylab = "steps")
```
Compute mean and median for the filled data.
```{r}
full_mean_steps = mean(data_imputing$steps)
full_median_steps = median(data_imputing$steps)
```
## Are there differences in activity patterns between weekdays and weekends?
mean(data_imputing$Steps)
data_imputing
mean(activityraw$steps)
median(activityraw$steps)
activityraw
head(activityraw)
mean(activity$steps)
median(activity$steps)
data_imputing
activity_NA<-sum(is.ns(activityraw))
activity_NA<-sum(is.na(activityraw))
activity_NA
library(weekdays)
install.packages("weekends")
head(steps.date)
steps.date$date<-as.Date(steps.date$date, "%Y-%m-%d")
steps.date$weekend<-"weekday"
steps.date$date<-as.Date(steps.date$date, "%Y-%m-%d")
steps.date$weekend<-"weekday"
step.date$weekend[weekdays(steps.date$date) %in% c("Saturday", "Sunday")]<-"weekend"
steps.date$weekend<-as.factor(steps.date$weekend)
steps.date$date<-as.Date(steps.date$date, "%Y-%m-%d")
steps.date$weekend<-"weekday"
steps.date$weekend[weekdays(steps.date$date) %in% c("Saturday", "Sunday")]<-"weekend"
steps.date$weekend<-as.factor(steps.date$weekend)
finaldata<- steps.date %.% group_by(interval, weekend) %.% summarize(avgsteps = mean(steps))
finaldata<- steps.date %.%
group_by(interval, weekend) %.%
summarize(avgsteps = mean(steps))
group_by(interval, weekend) %.%
library(ggplot)
library(ggplot2)
head(steps.date$weekend)
head(steps.date)
head(steps.date)
head(activity)
str(activity)
summary(activity)
install.packages("weekday")
